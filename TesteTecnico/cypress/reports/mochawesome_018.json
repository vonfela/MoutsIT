{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-13T21:15:08.806Z",
    "end": "2024-12-13T21:15:46.801Z",
    "duration": 37995,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "98067fc7-0adf-407e-9991-ed038b6a732e",
      "title": "",
      "fullFile": "cypress\\e2e\\UI_test\\cadastrar_usuarios.cy.js",
      "file": "cypress\\e2e\\UI_test\\cadastrar_usuarios.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4c7a0f92-d1b8-45da-b939-ea5a356efb4d",
          "title": "Cadastro de Usuários - UI Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve exibir a página de cadastro corretamente @ui @smoke",
              "fullTitle": "Cadastro de Usuários - UI Tests deve exibir a página de cadastro corretamente @ui @smoke",
              "timedOut": null,
              "duration": 5232,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Verificar se os elementos estão presentes e visíveis\n_cadastroUsuarioPage.default.verifyNomeInputVisible();\n_cadastroUsuarioPage.default.verifyEmailInputVisible();\n_cadastroUsuarioPage.default.verifyPasswordInputVisible();\n_cadastroUsuarioPage.default.verifyCheckboxVisible();\n_cadastroUsuarioPage.default.verifyCadastrarButtonVisible();",
              "err": {},
              "uuid": "212f901e-fa75-434d-b218-d1742cd41ab3",
              "parentUUID": "4c7a0f92-d1b8-45da-b939-ea5a356efb4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve cadastrar um novo usuário com sucesso @ui @cadastro",
              "fullTitle": "Cadastro de Usuários - UI Tests deve cadastrar um novo usuário com sucesso @ui @cadastro",
              "timedOut": null,
              "duration": 4265,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = {\n  nome: _faker.faker.person.fullName(),\n  email: _faker.faker.internet.email(),\n  senha: _faker.faker.internet.password({\n    length: 8\n  })\n};\n_cadastroUsuarioPage.default.fillNome(usuario.nome);\n_cadastroUsuarioPage.default.fillEmail(usuario.email);\n_cadastroUsuarioPage.default.fillPassword(usuario.senha);\n_cadastroUsuarioPage.default.clickCadastrar();\n// TODO: Verificar se o usuário foi cadastrado com sucesso - Implementação futura - Checkar com Dev team\n// CadastroUsuarioPage.alertMessage\n//     .should('be.visible')\n//     .and('contain', 'Cadastro realizado com sucesso')",
              "err": {},
              "uuid": "2a68a0c3-cc63-45dc-b36e-abd7f0093f18",
              "parentUUID": "4c7a0f92-d1b8-45da-b939-ea5a356efb4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve cadastrar um novo usuário administrador com sucesso @ui @cadastro",
              "fullTitle": "Cadastro de Usuários - UI Tests deve cadastrar um novo usuário administrador com sucesso @ui @cadastro",
              "timedOut": null,
              "duration": 3671,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  nome: _faker.faker.person.fullName(),\n  email: _faker.faker.internet.email(),\n  senha: _faker.faker.internet.password({\n    length: 8\n  })\n};\n_cadastroUsuarioPage.default.fillNome(adminUser.nome);\n_cadastroUsuarioPage.default.fillEmail(adminUser.email);\n_cadastroUsuarioPage.default.fillPassword(adminUser.senha);\n_cadastroUsuarioPage.default.selectAdministrador();\n_cadastroUsuarioPage.default.clickCadastrar();\n// TODO: Verificar se o usuário foi cadastrado com sucesso - Implementação futura - Checkar com Dev team\n// CadastroUsuarioPage.alertMessage\n//     .should('be.visible')\n//     .and('contain', 'Cadastro realizado com sucesso')",
              "err": {},
              "uuid": "8549417f-632c-4e21-bb5c-d62e4fd75330",
              "parentUUID": "4c7a0f92-d1b8-45da-b939-ea5a356efb4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve exibir erro ao tentar cadastrar com email já existente @ui @cadastro @error",
              "fullTitle": "Cadastro de Usuários - UI Tests deve exibir erro ao tentar cadastrar com email já existente @ui @cadastro @error",
              "timedOut": null,
              "duration": 3732,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_cadastroUsuarioPage.default.fillNome(novoUsuario.nome);\n_cadastroUsuarioPage.default.fillEmail(Cypress.env('EMAIL')); // email já existente\n_cadastroUsuarioPage.default.fillPassword(novoUsuario.senha);\n_cadastroUsuarioPage.default.clickCadastrar();\n_cadastroUsuarioPage.default.alertMessage.should('be.visible').and('contain', 'Este email já está sendo usado');",
              "err": {},
              "uuid": "c0a6e5d9-80ca-47d1-a7e6-c15c47e2e8e9",
              "parentUUID": "4c7a0f92-d1b8-45da-b939-ea5a356efb4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve exibir mensagens de erro para campos obrigatórios @ui @cadastro @error",
              "fullTitle": "Cadastro de Usuários - UI Tests deve exibir mensagens de erro para campos obrigatórios @ui @cadastro @error",
              "timedOut": null,
              "duration": 3443,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_cadastroUsuarioPage.default.clickCadastrar();\n_cadastroUsuarioPage.default.alertMessage.should('be.visible').and('contain', 'Nome é obrigatório').and('contain', 'Email é obrigatório').and('contain', 'Password é obrigatório');",
              "err": {},
              "uuid": "1f4b59ca-c380-433b-b633-4ecd9706f6e4",
              "parentUUID": "4c7a0f92-d1b8-45da-b939-ea5a356efb4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve exibir erro ao tentar cadastrar com nome contendo caracteres especiais @ui @cadastro @error @caracteresEspeciais @possivelBug",
              "fullTitle": "Cadastro de Usuários - UI Tests deve exibir erro ao tentar cadastrar com nome contendo caracteres especiais @ui @cadastro @error @caracteresEspeciais @possivelBug",
              "timedOut": null,
              "duration": 3519,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuarioComNomeEspecial = {\n  nome: 'João@#',\n  email: _faker.faker.internet.email(),\n  senha: _faker.faker.internet.password({\n    length: 8\n  })\n};\n_cadastroUsuarioPage.default.fillNome(usuarioComNomeEspecial.nome);\n_cadastroUsuarioPage.default.fillEmail(usuarioComNomeEspecial.email);\n_cadastroUsuarioPage.default.fillPassword(usuarioComNomeEspecial.senha);\n_cadastroUsuarioPage.default.clickCadastrar();\n// TODO: Verificar se o usuário foi cadastrado com sucesso - Implementação futura - Checkar com Dev team\n// Atualmente é possivel estar criando usuários com nome contendo caracteres especiais",
              "err": {},
              "uuid": "628c7a37-c3b3-490a-a4a6-2463acbefcc5",
              "parentUUID": "4c7a0f92-d1b8-45da-b939-ea5a356efb4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve exibir erro ao tentar cadastrar com email contendo @ no meio do email @ui @cadastro @error @caracteresEspeciais @possivelBug",
              "fullTitle": "Cadastro de Usuários - UI Tests deve exibir erro ao tentar cadastrar com email contendo @ no meio do email @ui @cadastro @error @caracteresEspeciais @possivelBug",
              "timedOut": null,
              "duration": 3469,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuarioComEmailEspecial = {\n  nome: _faker.faker.person.fullName(),\n  email: 'email@invalido.com@teste.com',\n  senha: _faker.faker.internet.password({\n    length: 8\n  })\n};\n_cadastroUsuarioPage.default.fillNome(usuarioComEmailEspecial.nome);\n_cadastroUsuarioPage.default.fillEmail(usuarioComEmailEspecial.email);\n_cadastroUsuarioPage.default.fillPassword(usuarioComEmailEspecial.senha);\n_cadastroUsuarioPage.default.clickCadastrar();\n// TODO: Criar error handling para o email com @ no meio do email\n// Atualmente existe apenas uma validação de erro via tooltip, que não é suficiente para validar o erro\n// Verifica se a mensagem de erro aparece\n// CadastroUsuarioPage.alertMessage\n//     .should('be.visible')\n//     .and('contain', 'Email inválido'); // Mensagem de erro esperada -> uma parte após \"@\" não deve conter o simbolo \"@\"",
              "err": {},
              "uuid": "4d5471da-efe5-4c5a-9cdd-4b3d18133669",
              "parentUUID": "4c7a0f92-d1b8-45da-b939-ea5a356efb4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve exibir erro ao tentar cadastrar com nome e email contendo caracteres especiais @ui @cadastro @error @caracteresEspeciais @possivelBug",
              "fullTitle": "Cadastro de Usuários - UI Tests deve exibir erro ao tentar cadastrar com nome e email contendo caracteres especiais @ui @cadastro @error @caracteresEspeciais @possivelBug",
              "timedOut": null,
              "duration": 3403,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuarioComNomeEEmailEspeciais = {\n  nome: 'João@#',\n  email: 'email#invalido.com@teste.com',\n  senha: _faker.faker.internet.password({\n    length: 8\n  })\n};\n_cadastroUsuarioPage.default.fillNome(usuarioComNomeEEmailEspeciais.nome);\n_cadastroUsuarioPage.default.fillEmail(usuarioComNomeEEmailEspeciais.email);\n_cadastroUsuarioPage.default.fillPassword(usuarioComNomeEEmailEspeciais.senha);\n_cadastroUsuarioPage.default.clickCadastrar();\n// TODO: Verificar se o usuário foi cadastrado com sucesso - Implementação futura - Checkar com Dev team\n// Atualmente é possivel estar criando usuários com nome contendo caracteres especiais",
              "err": {},
              "uuid": "0f36fa95-e37e-4290-9fb3-3c0ec5f91454",
              "parentUUID": "4c7a0f92-d1b8-45da-b939-ea5a356efb4d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "212f901e-fa75-434d-b218-d1742cd41ab3",
            "2a68a0c3-cc63-45dc-b36e-abd7f0093f18",
            "8549417f-632c-4e21-bb5c-d62e4fd75330",
            "c0a6e5d9-80ca-47d1-a7e6-c15c47e2e8e9",
            "1f4b59ca-c380-433b-b633-4ecd9706f6e4",
            "628c7a37-c3b3-490a-a4a6-2463acbefcc5",
            "4d5471da-efe5-4c5a-9cdd-4b3d18133669",
            "0f36fa95-e37e-4290-9fb3-3c0ec5f91454"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30734,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}